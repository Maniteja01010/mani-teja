# -*- coding: utf-8 -*-
"""logistic regression b 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tGRH5JZQGTEga4J23GLLONrtH10Vt9l2
"""



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the training and testing datasets
train_df = pd.read_csv('Titanic_train.csv')
test_df = pd.read_csv('Titanic_test.csv')



train_df.info()

train_df.describe()

# Histograms
train_df.hist(bins=20, figsize=(20, 15))
plt.show()

# Box plots
plt.figure(figsize=(15, 10))
sns.boxplot(data=train_df)
plt.xticks(rotation=90)
plt.show()

# Pair plot
sns.pairplot(train_df, hue='Survived')
plt.show()

# Select only numeric columns for correlation matrix
numeric_df = train_df.select_dtypes(include=['float64', 'int64'])

# Compute the correlation matrix
corr_matrix = numeric_df.corr()

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix Heatmap')
plt.show()

"""2. Data Preprocessing"""

# Handle missing values in the training set
train_df['Age'].fillna(train_df['Age'].median(), inplace=True)
train_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace=True)
train_df.drop(columns=['Cabin'], inplace=True)

# Encode categorical variables in the training set
train_df = pd.get_dummies(train_df, columns=['Sex', 'Embarked'], drop_first=True)

# Drop unnecessary columns in the training set
train_df.drop(columns=['Name', 'Ticket'], inplace=True)

# Apply the same preprocessing steps to the testing set
test_df['Age'].fillna(test_df['Age'].median(), inplace=True)
test_df['Fare'].fillna(test_df['Fare'].median(), inplace=True) # Assuming 'Fare' might have missing values test_df.drop(columns=['Cabin'], inplace=True) test_df = pd.get_dummies(test_df, columns=['Sex', 'Embarked'], drop_first=True)
test_df.drop(columns=['Name', 'Ticket'], inplace=True)



"""3. Model Building"""

from sklearn.linear_model import LogisticRegression
# Define features and target for the training set
X_train = train_df.drop(columns='Survived')
y_train = train_df['Survived']

# Define features for the testing set
# Assuming 'Survived' column is not available in test set for submission
X_test = test_df

# Build and train the logistic regression model
log_reg = LogisticRegression(max_iter=200)
log_reg.fit(X_train, y_train)



"""4. Model Evaluation"""

from sklearn.metrics import classification_report, roc_auc_score, roc_curve

# Predictions on the training set to evaluate
y_train_pred = log_reg.predict(X_train)
y_train_pred_proba = log_reg.predict_proba(X_train)[:, 1]

# Evaluation metrics
print("Classification Report (Training Set):\n", classification_report(y_train, y_train_pred))
print("ROC-AUC Score (Training Set):", roc_auc_score(y_train, y_train_pred_proba))

# ROC Curve for the training set
fpr, tpr, thresholds = roc_curve(y_train, y_train_pred_proba)
plt.plot(fpr, tpr, label="Logistic Regression (Training Set)")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve (Training Set)")
plt.legend(loc="best")
plt.show()

# Interpret the coefficients
coefficients = pd.DataFrame(log_reg.coef_.flatten(), X_train.columns, columns=['Coefficient'])
print(coefficients)

pip install streamlit

import streamlit as st
import joblib

# Save the trained model
joblib.dump(log_reg, 'logistic_regression_model.pkl')

# Streamlit App
def main():
    st.title("Titanic Survival Prediction")

    # User input features
    Pclass = st.selectbox('Pclass', [1, 2, 3])
    Age = st.slider('Age', 0, 80, 25)
    SibSp = st.slider('SibSp', 0, 8, 0)
    Parch = st.slider('Parch', 0, 6, 0)
    Fare = st.slider('Fare', 0.0, 550.0, 50.0)
    Sex_male = st.selectbox('Sex', [0, 1])
    Embarked_Q = st.selectbox('Embarked_Q', [0, 1])
    Embarked_S = st.selectbox('Embarked_S', [0, 1])

    # Predict button
    if st.button('Predict'):
        # Load model
        model = joblib.load('logistic_regression_model.pkl')

        # Make prediction
        input_data = pd.DataFrame({
            'Pclass': [Pclass],
            'Age': [Age],
            'SibSp': [SibSp],
            'Parch': [Parch],
            'Fare': [Fare],
            'Sex_male': [Sex_male],
            'Embarked_Q': [Embarked_Q],
            'Embarked_S': [Embarked_S]
        })
        prediction = model.predict(input_data)
        survival_prob = model.predict_proba(input_data)[:, 1]

        st.write(f"Predicted Survival: {'Yes' if prediction[0] == 1 else 'No'}")
        st.write(f"Survival Probability: {survival_prob[0]:.2f}")

if __name__ == '__main__':
    main()

